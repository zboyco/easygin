// Code generated by easygin; DO NOT EDIT.

package user

import (
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/zboyco/easygin"
)

func (r *CreateUser) EasyGinBindParameters(c *gin.Context) error {
	{
		// 绑定JSON请求体
		decoder := json.NewDecoder(c.Request.Body)
		if err := decoder.Decode(&r.Body); err != nil {
			return err
		}

		if easygin.HandleBodyJsonOmitEmptyAndDefault() {
			// 校验JSON必填字段和默认值
			if err := easygin.ValidateJsonRequiredFields(reflect.ValueOf(&r.Body)); err != nil {
				return err
			}
		}
	}
	return nil
}

func (r *GetUser) EasyGinBindParameters(c *gin.Context) error {
	// 绑定头部参数 Token
	{
		headerVal := c.GetHeader("Token")
		if headerVal == "" {
			return errors.New("missing required parameter 'Token' in header")
		}
		if headerVal != "" {
			r.Token = string(headerVal)
		}
	}
	// 绑定路径参数 id
	{
		pathVal := c.Param("id")
		if pathVal == "0" {
			pathVal = ""
		}
		if pathVal == "" {
			return errors.New("missing required parameter 'id' in path")
		}
		if pathVal != "" {
			intVal, err := strconv.ParseInt(pathVal, 10, 64)
			if err != nil {
				return fmt.Errorf("invalid parameter 'id': %v", err.Error())
			}
			r.ID = int(intVal)
		}
	}
	return nil
}

func (r *ListUser) EasyGinBindParameters(c *gin.Context) error {
	// 绑定查询参数 name
	{
		queryVal := c.Query("name")
		if queryVal != "" {
			r.Name = string(queryVal)
		}
	}
	// 绑定查询参数 ageMin
	{
		queryVal := c.Query("ageMin")
		if queryVal == "0" {
			queryVal = ""
		}
		if queryVal == "" {
			queryVal = "18"
		}
		if queryVal != "" {
			intVal, err := strconv.ParseInt(queryVal, 10, 64)
			if err != nil {
				return fmt.Errorf("invalid parameter 'ageMin': %v", err.Error())
			}
			r.AgeMin = int(intVal)
		}
	}
	return nil
}

